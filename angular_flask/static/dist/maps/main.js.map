{"version":3,"sources":["angular_flask/static/src/js/app.js","angular_flask/static/src/js/controllers.js","angular_flask/static/src/js/directives.js","angular_flask/static/src/js/filters.js","angular_flask/static/src/js/services.js"],"names":[],"mappingsfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"main.js","sourcesContent":["'use strict';\n\nangular.module('AngularFlask', ['ngRoute', 'ngResource', 'ngMaterial', 'ngAnimate', 'textAngular', 'ngSanitize', 'ngMessages', 'ngPassword'])\n    .config(['$routeProvider', '$locationProvider', '$mdThemingProvider', '$httpProvider',\n        function ($routeProvider, $locationProvider, $mdThemingProvider, $httpProvider) {\n            $routeProvider\n                .when('/', {\n                    templateUrl: 'static/partials/landing.html',\n                })\n                .when('/about', {\n                    templateUrl: 'static/partials/about.html',\n                })\n\n                .when('/posts', {\n                    templateUrl: 'static/partials/post-list.html',\n\n                })\n                .when('/new', {\n                    templateUrl: 'static/partials/new_post.html',\n                })\n                .when('/posts/:id', {\n                    templateUrl: '/static/partials/post-detail.html',\n                })\n                .when('/blog', {\n                    templateUrl: 'static/partials/post-list.html',\n                })\n                .when('/register', {\n                    templateUrl: 'static/partials/register.html',\n                })\n                .when('/login', {\n                    templateUrl: 'static/partials/register.html',\n                })\n                .otherwise({\n                    redirectTo: '/'\n                });\n\n            //Customize themes for Angular Material\n            $mdThemingProvider.theme('default')\n                .primaryPalette('blue-grey')\n                .accentPalette('orange')\n                .backgroundPalette('grey');\n\n            $locationProvider.html5Mode(true);\n\n           /* $httpProvider.responseInterceptors.push(['$rootScope', '$q', '$injector', '$location',\n                function ($rootScope, $q, $injector, $location) {\n                    return function (promise) {\n                        return promise.then(function (response) {\n                            return response; // no action, was successful\n                        }, function (response) { // error - was it 401 or something else?\n                            if (response.status === 401 && response.data.error && response.data.error === \"invalid_token\") {\n                                var deferred = $q.defer(); // defer until we can re-request a new token\n                                // Get a new token... (cannot inject $http directly as will cause a circular ref)\n                                $injector.get(\"$http\").jsonp('/blog/api/token')\n                                    .then(function (loginResponse) {\n                                        if (loginResponse.data) {\n                                            $rootScope.oauth = loginResponse.data.oauth; // we have a new oauth token - set at $rootScope\n                                            // now let's retry the original request - transformRequest in .run() below will add the new OAuth token\n                                            $injector.get(\"$http\")(response.config).then(function (response) {\n                                                // we have a successful response - resolve it using deferred\n                                                deferred.resolve(response);\n                                            }, function (response) {\n                                                deferred.reject(); // something went wrong\n                                            });\n                                        } else {\n                                            deferred.reject(); // login.json didn't give us data\n                                        }\n                                    }, function (response) {\n                                        deferred.reject(); // token retry failed, redirect so user can login again\n                                        $location.path('/register');\n                                        return;\n                                    });\n                                return deferred.promise; // return the deferred promise\n                            }\n                            return $q.reject(response); // not a recoverable error\n                        });\n                    };\n                }])*/\n        }\n    ])\n    .config(function ($provide) {\n\n    $provide.decorator('taOptions', ['taRegisterTool', '$delegate', function (taRegisterTool, taOptions) {\n        taRegisterTool('uploadImage', {\n            buttontext: 'Upload Image',\n            iconclass: \"fa fa-image\",\n            action: function () {\n                //angular.element('#uploadImage').click();\n                document.getElementById('uploadImage').click();\n            }\n        });\n        taOptions.toolbar[1].push('uploadImage');\n        return taOptions;\n    }]);\n})\n;","'use strict';\nangular.module('AngularFlask')\n\n    .controller('LatestController', ['$scope', 'allPosts', function ($scope, allPosts) {\n        $scope.posts = [];\n        $scope.showPost = false;\n        $scope.message = \"Loading ...\";\n        allPosts.getPosts().get()\n            .$promise.then(function (response) {\n                $scope.posts = response.posts;\n                if ($scope.posts.length > 5) {\n                    $scope.posts.sort(function (a, b) {\n                        return a.date > b.date ? -1 : a.date === b.date ? 0 : 1;\n                    });\n                    $scope.posts.length = 5;\n                }\n                $scope.showPost = true;\n            },\n            function (response) {\n                $scope.message = \"Error: \" + response.status + \" \" + response.statusText;\n            });\n    }])\n    .controller('PostListController', ['$scope', 'allPosts', function ($scope, allPosts) {\n        $scope.posts = [];\n        $scope.showPost = false;\n        $scope.message = \"Loading ...\";\n        allPosts.getPosts().get()\n            .$promise.then(function (response) {\n                $scope.posts = response.posts;\n                $scope.showPost = true;\n\n                buildGridModel($scope.posts);\n            },\n            function (response) {\n                $scope.message = \"Error: \" + response.status + \" \" + response.statusText;\n            });\n\n        function buildGridModel(posts) {\n            var it, results = [];\n            for (var j = 0; j < posts.length; j++) {\n                it = posts[j];\n                it.span = {row: 1, col: 1};\n                it.img = 'img-sm';\n                it.para = 'para-sm';\n                switch (j + 1) {\n                    case 1:\n                        it.span.row = it.span.col = 2;\n                        it.img = 'img-lg';\n                        it.para = 'para-lg';\n                        break;\n                    case 4:\n                        it.span.col = 2;\n                        break;\n                    case 5:\n                        it.span.row = it.span.col = 2;\n                        it.img = 'img-lg';\n                        it.para = 'para-lg';\n                        break;\n                }\n                results.push(it);\n            }\n\n            return posts;\n        }\n\n    }])\n    .controller('NewPostController', ['$scope', 'fileUpload', '$location', function ($scope, fileUpload, $location) {\n\n        $scope.createPost = function () {\n            var file = $scope.myFile;\n            fileUpload.newPost(file, $scope.post, $scope.htmlVariable);\n            $location.path('/');\n        };\n\n    }])\n    .controller('PostDetailController', ['$scope', 'allPosts', '$routeParams', function ($scope, allPosts, $routeParams) {\n        $scope.post = {};\n        allPosts.getPosts().get({id: parseInt($routeParams.id, 10)})\n            .$promise.then(function (response) {\n                //console.log('response is: ', response)\n                $scope.post = response.post;\n                $scope.showPost = true;\n            },\n            function (response) {\n                $scope.message = \"Error: \" + response.status + \" \" + response.statusText;\n            });\n    }])\n    .controller('UserController', ['$scope', 'createUser', '$location', '$timeout', function ($scope, createUser, $location, $timeout) {\n        $scope.hasAccount = false;\n        $scope.changeForm = function () {\n            $scope.hasAccount = !$scope.hasAccount;\n        };\n        $scope.user = {\n            username: \"\",\n            email: \"\",\n            password: \"\"\n        };\n        $scope.register = function () {\n            var self = this;\n            var user = $scope.user;\n            $scope.userError = false;\n            $scope.emailError = false;\n            createUser.newUser(user)\n                .then(function success() {\n                    $location.path('/posts');\n                }, function error(response) {\n                    $scope.userMessage = response.data.message;\n                    if ($scope.userMessage.split(' ')[0] === 'User') {\n                        self.userForm.username.$setValidity(\"userExists\", false);\n                        $timeout(function () {\n                            // Set form to valid after timeout to enable submitting it again\n                            self.userForm.username.$setValidity(\"userExists\", true);\n                        }, 2000);\n                    } else if ($scope.userMessage.split(' ')[0] === 'Email') {\n                        self.userForm.email.$setValidity(\"emailExists\", false);\n                        $timeout(function () {\n                            self.userForm.email.$setValidity(\"emailExists\", true);\n                        }, 2000);\n                    }\n                });\n        }\n    }])\n","angular.module('AngularFlask')\n    .directive('fileModel', ['$parse', function ($parse) {\n        return {\n            restrict: 'A',\n            link: function (scope, element, attrs) {\n                var model = $parse(attrs.fileModel);\n                var modelSetter = model.assign;\n\n                element.bind('change', function () {\n                    scope.$apply(function () {\n                        modelSetter(scope, element[0].files[0]);\n                    });\n                });\n            }\n        };\n    }]);","'use strict';\n\n/* Filters */\n\nangular.module('angularFlaskFilters', []).filter('uppercase', function () {\n    return function (input) {\n        return input.toUpperCase();\n    }\n});","'use strict';\n\nangular.module('AngularFlask')\n    .constant(\"baseURL\", \"http://0.0.0.0:5000\")\n    .service('allPosts', ['$resource', 'baseURL', function ($resource, baseURL) {\n        this.getPosts = function () {\n            return $resource(baseURL + '/blog/api/posts/:id', {}, {\n                query: {\n                    method: 'GET',\n                    isArray: true\n                }\n            });\n        }\n    }])\n    .service('fileUpload', ['$http', function ($http) {\n        this.newPost = function (file, data1, data2) {\n            var fd = new FormData();\n            fd.append('file', file);\n            fd.append(\"content\", JSON.stringify(data1));\n            fd.append(\"content2\", JSON.stringify(data2));\n            $http.post(\"http://0.0.0.0:5000\" + \"/blog/api/posts/new\", fd, {\n                    transformRequest: angular.identity,\n                    headers: {'Content-Type': undefined}\n                })\n                .success(function () {\n                    console.log('File saved');\n                })\n                .error(function (data) {\n                    console.log('Error, did not save', data);\n                });\n        }\n    }])\n    .service('createUser', ['$http', function ($http) {\n        this.newUser = function (user) {\n            return $http.post(\"http://0.0.0.0:5000\" + \"/blog/api/users\", user);\n        }\n    }])\n;\n\n\n"],"sourceRoot":"/source/"}