{"version":3,"sources":["angular_flask/static/src/js/app.js","angular_flask/static/src/js/directives.js","angular_flask/static/src/js/filters.js","angular_flask/static/src/js/services.js","angular_flask/static/src/js/controllers/AboutController.js","angular_flask/static/src/js/controllers/EditPostController.js","angular_flask/static/src/js/controllers/MainController.js","angular_flask/static/src/js/controllers/NewPostController.js","angular_flask/static/src/js/controllers/Page404Controller.js","angular_flask/static/src/js/controllers/PostController.js","angular_flask/static/src/js/controllers/PostDetailController.js","angular_flask/static/src/js/controllers/PostListController.js","angular_flask/static/src/js/controllers/UserController.js","angular_flask/static/src/js/controllers/UserDetailsController.js","angular_flask/static/src/js/controllers/UserPostsController.js","angular_flask/static/src/js/controllers/UserProfileController.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClhzGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjnGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"main.js","sourcesContent":["'use strict';\n\nvar app = angular.module('app', ['ngRoute', 'ngResource', 'ngMaterial', 'ngAnimate', 'textAngular', 'ngSanitize', 'ngMessages', 'ngPassword', 'ngCookies', 'appFilters'])\n    .config(['$routeProvider', '$locationProvider', '$mdThemingProvider',\n        function ($routeProvider, $locationProvider, $mdThemingProvider) {\n            $routeProvider\n                .when('/', {\n                    templateUrl: 'static/partials/landing.html',\n                    controller: 'PostListController'\n                })\n                .when('/about', {\n                    templateUrl: 'static/partials/about.html',\n                    controller: 'AboutController'\n                })\n                .when('/posts', {\n                    templateUrl: 'static/partials/post-list.html',\n                    controller: 'PostListController'\n                })\n                .when('/new', {\n                    templateUrl: 'static/partials/new_post.html',\n                    controller: 'NewPostController'\n                })\n                .when('/edit', {\n                    templateUrl: 'static/partials/new_post.html',\n                    controller: 'EditPostController'\n                })\n                .when('/posts/:slug', {\n                    templateUrl: '/static/partials/post-detail.html',\n                    controller: 'PostDetailController',\n                    resolve: {\n                        response: function ($route, postService) {\n                            return postService.getPosts($route.current.params.slug);\n                        }\n                    }\n                })\n                .when('/register', {\n                    templateUrl: 'static/partials/register.html',\n                    controller: 'UserController'\n                })\n                .when('/login', {\n                    templateUrl: 'static/partials/register.html',\n                    controller: 'UserController'\n                })\n                .when('/me/posts', {\n                    templateUrl: 'static/partials/my_posts.html',\n                    controller: 'UserPostsController'\n                })\n                .when('/users/:user', {\n                    templateUrl: 'static/partials/user_details.html',\n                    controller: 'UserProfileController'\n                })\n                .when('/me/profile', {\n                    templateUrl: 'static/partials/profile.html',\n                    controller: 'UserDetailsController'\n                })\n                .otherwise({\n                    redirectTo: '/'\n                });\n\n            //Customize themes for Angular Material\n            $mdThemingProvider.theme('default')\n                .primaryPalette('blue-grey')\n                .accentPalette('red')\n                .warnPalette('deep-orange')\n                .backgroundPalette('grey');\n\n            $locationProvider.html5Mode(true);\n        }\n    ])\n    .run(function ($rootScope, $location, $cookies, userService) {\n        $rootScope.$on(\"$routeChangeStart\", function (event, next) {\n            if (next.templateUrl == 'static/partials/new_post.html' || next.templateUrl == 'static/partials/profile.html'\n                || next.templateUrl == 'static/partials/my_posts.html') {\n                var user = $cookies.get('current_user');\n                if (!user) {\n                    $location.path(\"/login\");\n                }\n            }\n        });\n        userService.isLoggedIn();\n    });","angular.module('app')\n    .directive('fileModel', ['$parse', function ($parse) {\n        return {\n            restrict: 'A',\n            link: function (scope, element, attrs) {\n                var model = $parse(attrs.fileModel);\n                var modelSetter = model.assign;\n\n                element.bind('change', function () {\n                    scope.$apply(function () {\n                        modelSetter(scope, element[0].files[0]);\n                    });\n                });\n            }\n        };\n    }])\n    .directive('post', function () {\n        return {\n            restrict: 'E',\n            controller: 'PostController',\n            templateUrl: 'static/partials/post.html',\n            replace: true\n        };\n    })\n    .directive('postMenu', function () {\n        return {\n            restrict: 'E',\n            controller: 'PostController',\n            templateUrl: 'static/partials/post-elements/post-menu.html',\n            replace: true\n        };\n    });\n\n\n","'use strict';\n\n/* Filters */\n\nangular.module('appFilters', [])\n    .filter('localDate', function () {\n        return function (input) {\n            return moment(new Date(input)).format('MMM D YYYY HH:mm');\n        }\n    });","'use strict';\n\nangular.module('app')\n    // A service to share 'post' object between controllers\n    .service('sharedPost', function () {\n        var post = this;\n    })\n\n    // Service with methods related to operation on/with posts\n    .service('postService', ['$http', '$mdDialog', '$cookies', function ($http, $mdDialog, $cookies) {\n\n        /* Check if the logged in user has favorited the post and add red color to fav icon if yes.\n         * Allows to pass in user as u for testing.\n         */\n        this.checkFav = function (post, u) {\n            var user = u || $cookies.getObject('current_user');\n            if (user && post.favorited_by) {\n                var filtered = post.favorited_by.filter(function (el) {\n                    return el.username == user.username;\n                });\n                return filtered.length > 0;\n            }\n        };\n\n        // Ask user for confirmation and delete a post\n        this.delete = function (ev, postId) {\n            var confirm = $mdDialog.confirm()\n                .title('Are you sure you want to delete this post?')\n                .textContent('This action cannot be undone.')\n                .ariaLabel('Confirm post deletion')\n                .targetEvent(ev)\n                .ok('Delete')\n                .cancel('Cancel');\n            return $mdDialog.show(confirm).then(function () {\n                return $http.post(\"/blog/api/posts/\" + postId + \"/delete\", {})\n            });\n        };\n\n        this.confirmUnpublish = function (ev, post) {\n            var confirm = $mdDialog.confirm()\n                .title('Are you sure you want to unpublish this post?')\n                .textContent('This will make it not visible to public.')\n                .ariaLabel('Confirm post unpublishing')\n                .targetEvent(ev)\n                .ok('Unpublish')\n                .cancel('Cancel');\n            return $mdDialog.show(confirm);\n        };\n\n        this.editPost = function (file, data) {\n            var fd = new FormData();\n            fd.append('file', file);\n            fd.append('post', JSON.stringify(data));\n            return $http.post(\"/blog/api/posts/\" + data.id + \"/edit\", fd, {\n                transformRequest: angular.identity,\n                headers: {'Content-Type': undefined}\n            })\n        };\n\n        this.favorite = function (post) {\n            return $http.post(\"/blog/api/posts/\" + post.slug, {});\n\n        };\n\n        this.getPosts = function (slug) {\n            if (slug) {\n                return $http.get('/blog/api/posts/' + slug, {});\n            } else {\n                return $http.get('/blog/api/posts', {});\n            }\n        };\n\n        this.newPost = function (file, data) {\n            var fd = new FormData();\n            fd.append('file', file);\n            fd.append('post', JSON.stringify(data));\n            return $http.post(\"/blog/api/posts/new\", fd, {\n                transformRequest: angular.identity,\n                headers: {'Content-Type': undefined}\n            })\n        };\n\n        this.unpublish = function (ev, post) {\n            return this.confirmUnpublish(ev, post).then(function () {\n                return $http.post('/blog/api/posts/' + post.id + '/unpublish', {})\n            });\n        };\n    }])\n    .service('imgPreview', function () {\n        this.preview = function (element, scope) {\n            var reader = new FileReader();\n            reader.onload = function (event) {\n                scope.imageSrc = event.target.result;\n                scope.$apply();\n            };\n            // when the file is read it triggers the onload event above.\n            reader.readAsDataURL(element.files[0]);\n        };\n        this.activateUpload = function (id) {\n            document.getElementById(id).click();\n        }\n    })\n    .service('favoritePost', ['$http', '$cookies', function ($http, $cookies) {\n        this.favorite = function (post) {\n            return $http.post(\"/blog/api/posts/\" + post.slug, {});\n        };\n\n        /* Check if the logged in user has favorited the post and add red color to fav icon if yes */\n        this.checkFav = function (post) {\n            var user = $cookies.getObject('current_user');\n            if (user) {\n                var filtered = post.favorited_by.filter(function (el) {\n                    return el.username == user.username;\n                });\n                if (filtered.length) {\n                    post.favClass = 'red';\n                } else {\n                    post.favClass = '';\n                }\n            }\n        }\n    }])\n    .service('addComment', ['$http', function ($http) {\n        this.add = function (comment, postId) {\n            return $http.post(\"/blog/api/posts/\" + postId + \"/comments/new\", JSON.stringify(comment))\n        }\n    }])\n    .service('goTo', ['$anchorScroll', '$location', function ($anchorScroll, $location) {\n        this.goTo = function (post, el) {\n            var selector = document.getElementById(el);\n            // If we are on post detail page, scroll to comments\n            if (selector) {\n                $location.hash(el);\n                $anchorScroll();\n                // Else go to post detail page and jump to comments\n            } else {\n                $location.path('/posts/' + post.slug).hash(el);\n            }\n        }\n    }])\n    .service('toast', ['$mdToast', function ($mdToast) {\n        this.showToast = function (message, delay) {\n            return $mdToast.show(\n                $mdToast.simple()\n                    .textContent(message)\n                    .position('right top')\n                    .hideDelay(delay)\n            );\n        }\n    }])\n    .service('userService', ['$http', '$cookies', function ($http, $cookies) {\n        /*\n         * Check if the user is still logged in on the server in case there were some errors or database reset\n         * to prevent the situations when user is logged out on the server but logged in in the browser\n         */\n        this.isLoggedIn = function () {\n            return $http.get(\"/blog/api/current_user\")\n                .then(function (response) {\n                    var msg = response.data.message;\n                    if (msg === 'no user' && $cookies.get('current_user')) {\n                        $cookies.remove('current_user');\n                    }\n                    // Fallback in case there is an unexpected server error\n                }, function () {\n                    if ($cookies.get('current_user')) {\n                        $cookies.remove('current_user');\n                    }\n                });\n        };\n\n        this.newUser = function (file, user) {\n            var fd = new FormData();\n            fd.append('file', file);\n            fd.append('user', JSON.stringify(user));\n            return $http.post(\"/blog/api/users\", fd, {\n                transformRequest: angular.identity,\n                headers: {'Content-Type': undefined}\n            });\n        };\n\n        this.update = function (file, user) {\n            var fd = new FormData();\n            fd.append('file', file);\n            fd.append('user', JSON.stringify(user));\n            return $http.post(\"/blog/api/users/edit\", fd, {\n                transformRequest: angular.identity,\n                headers: {'Content-Type': undefined}\n            });\n        };\n\n        this.login = function (user) {\n            return $http.post(\"/login\", user);\n        };\n\n        this.logout = function () {\n            return $http.post(\"/logout\", {});\n        };\n\n        this.getPosts = function (username) {\n            return $http.get(\"/blog/api/users/\" + username + \"/posts\")\n        };\n\n        this.getDetails = function (username) {\n            return $http.get(\"/blog/api/users/\" + username);\n        }\n    }])\n;\n\n","'use strict';\n\napp.controller('AboutController', ['$scope', function ($scope) {\n    $scope.page.loading = false;\n}]);\n\n","'use strict';\n\napp.controller('EditPostController', ['$scope', 'postService', '$location', 'imgPreview', 'sharedPost', 'toast', '$window',\n    function ($scope, postService, $location, imgPreview, sharedPost, toast, $window) {\n        $scope.page.loading = false; // loading progress bar\n        $scope.heading = 'Edit';\n        $scope.button = 'Save changes';\n        $scope.post = sharedPost.post;\n        $scope.post.disabled = true;\n\n        $scope.createPost = function (form, post, publish) {\n\n            if (form.$valid) {\n                $scope.loading = true; // loading spinner\n                var file = $scope.myFile;\n                post.public = publish || post.public;\n                postService.editPost(file, post)\n                    .then(function success(response) {\n                        $scope.loading = false;\n                        if (post.public) {\n                            toast.showToast('Post edited', 1000).then(function () {\n                                $window.location.reload();\n                                $location.path('/posts/' + response.data.slug);\n                            });\n                        } else {\n                            toast.showToast('Changes saved', 1000)\n                        }\n                    }, function error(response) {\n                        $scope.loading = false;\n                        toast.showToast('Could not edit post. Please try again later', 5000);\n                    });\n            }\n        };\n\n        $scope.setFile = function (element) {\n            return imgPreview.preview(element, $scope);\n        };\n\n        $scope.activateUpload = function () {\n            return imgPreview.activateUpload('uploadImage');\n        }\n    }]);\n","'use strict';\n\napp.controller('MainController', ['$scope', '$rootScope', 'userService', '$cookies', '$location', 'imgPreview', 'toast',\n    'sharedPost', function ($scope, $rootScope, userService, $cookies, $location, imgPreview, toast, sharedPost) {\n        $scope.page = {};\n        $scope.page.loading = false;\n        $scope.isOpen = false;\n        $scope.currentUser = function () {\n            return $cookies.get('current_user');\n        };\n\n        /* Separate function to get user details to avoid loops with JSON.parse since\n         currentUser() is called constantly */\n        $scope.getUserDetails = function () {\n            if ($scope.currentUser()) {\n                return JSON.parse($scope.currentUser());\n            }\n        };\n\n        $scope.user = $scope.getUserDetails();\n\n        $scope.logout = function () {\n            if ($scope.currentUser()) {\n                userService.logout()\n                    .then(function success() {\n                        $cookies.remove('current_user');\n                        $location.path('/');\n                    }, function error(response) {\n                        console.log('Could not log out', response);\n                    });\n            }\n        };\n\n        $scope.setFile = function (element) {\n            return imgPreview.preview(element, $scope);\n        };\n\n        $scope.activateUpload = function () {\n            return imgPreview.activateUpload('uploadAva');\n        };\n\n        /* Redirect to '/new' route and clear the sharedPost since we are not editing but creating a new post */\n        $scope.createPost = function () {\n            sharedPost.post = {};\n            $location.path('/new');\n        };\n\n    }]);","'use strict';\n\napp.controller('NewPostController', ['$scope', 'postService', '$location', 'imgPreview', '$cookies', 'toast',\n    function ($scope, postService, $location, imgPreview, $cookies, toast) {\n        $scope.page.loading = false; // loading progress bar\n        var currentUser = $cookies.getObject('current_user');\n        $scope.heading = 'Create';\n        $scope.button = 'Save';\n        if (currentUser) {\n            $scope.post = {\n                title: '',\n                author: currentUser.username,\n                avatar: currentUser.avatar,\n                date: new Date(),\n                cover_photo: '../img/covers/default.jpg',\n                disabled: true\n            };\n        }\n        $scope.createPost = function (form, post, publish) {\n\n            if (form.$valid) {\n                $scope.loading = true; // loading spinner\n                var file = $scope.myFile;\n                post.public = publish;\n                postService.newPost(file, post)\n                    .then(function success(response) {\n                        $scope.loading = false;\n                        toast.showToast('Post saved', 1000).then(function () {\n                            $location.path('/posts/' + response.data.slug);\n                        })\n                    }, function error(response) {\n                        $scope.loading = false;\n                        toast.showToast('Could not save post. Please try again later', 5000);\n                    });\n            }\n        };\n\n        $scope.publish = function (form, post) {\n\n            if (form.$valid) {\n                $scope.loading = true; // loading spinner\n                var file = $scope.myFile;\n                postService.newPost(file, $scope.post)\n                    .then(function success(response) {\n                        $scope.loading = false;\n                        toast.showToast('Post saved', 1000).then(function () {\n                            $location.path('/posts/' + response.data.slug);\n                        })\n                    }, function error(response) {\n                        $scope.loading = false;\n                        toast.showToast('Could not save post. Please try again later', 5000);\n                    });\n            }\n        };\n\n        $scope.setFile = function (element) {\n            return imgPreview.preview(element, $scope);\n        };\n\n        $scope.activateUpload = function () {\n            return imgPreview.activateUpload('uploadImage');\n        }\n    }]);","'use strict';\n\napp.controller('Page404Controller', ['$scope', '$location', '$window', function ($scope, $location, $window) {\n    $scope.goHome = function () {\n        $location.path('/');\n        $window.location.reload();\n    }\n}]);","'use strict';\n\napp.controller('PostController', ['$scope', '$location', 'sharedPost', 'addComment', '$mdDialog', 'goTo', 'postService',\n    'toast', '$cookies', function ($scope, $location, sharedPost, addComment, $mdDialog, goTo, postService, toast, $cookies) {\n\n        $scope.favorite = function (post) {\n            var user = $cookies.getObject('current_user');\n            // Allow to favorite a post only if user is logged in\n            if (user) {\n                postService.favorite(post)\n                    .then(function success(response) {\n                            angular.extend(post, response.data.post);\n                        },\n                        function error(response) {\n                            toast.showToast('Server error. Please try again later', 5000);\n                            console.log('Couldn\\'t favorite a post', response);\n                        }\n                    )\n            }\n        };\n\n        $scope.hasFavorited = function (post) {\n            return postService.checkFav(post);\n        };\n\n        $scope.editPost = function (post) {\n            sharedPost.post = post;\n            $location.path('/edit');\n        };\n\n        $scope.publishPost = function (ev, post) {\n            post.public = true;\n            postService.editPost(null, post)\n                .then(function (response) {\n                    angular.extend(post, response.data.post);\n                }, function () {\n                    toast.showToast('Server error. Please try again later', 5000);\n                });\n        };\n\n        $scope.unpublishPost = function (ev, post) {\n            postService.unpublish(ev, post)\n                .then(function (response) {\n                    angular.extend(post, response.data.post);\n                });\n        };\n\n        // Show modal to ask for confirmation of post deletion\n        $scope.showConfirm = function (ev, postId) {\n            postService.delete(ev, postId)\n                .then(function () {\n                    // if there's posts array, we're in the post list controller or user posts controller and have to update the list\n                    if ($scope.posts) {\n                        for (var i = 0; i < $scope.posts.length; i++) {\n                            if ($scope.posts[i].id === postId) {\n                                $scope.posts.splice(i, 1);\n                            }\n                        }\n                        // Else just redirect to /posts\n                    } else {\n                        $location.path('/posts');\n                    }\n                })\n        };\n\n        $scope.addComment = function (post) {\n            var self = this;\n            addComment.add(self.comment, post.id)\n                .then(function success(response) {\n                    self.comment = '';\n                    angular.extend(post.comments, response.data.comments);\n                }, function error() {\n                    toast.showToast('Server error. Please try again later', 5000);\n                });\n        };\n\n        $scope.gotoComments = function (post) {\n            goTo.goTo(post, 'comments');\n        };\n\n        $scope.showAdvanced = function (ev, post) {\n\n            $mdDialog.show({\n                templateUrl: 'static/partials/user-list.html',\n                locals: {\n                    post: post\n                },\n                controller: DialogController,\n                parent: angular.element(document.body),\n                targetEvent: ev,\n                clickOutsideToClose: true,\n                fullscreen: false\n            });\n        };\n    }\n]);\n\nfunction DialogController($scope, $mdDialog, post) {\n\n    $scope.cancel = function () {\n        $mdDialog.cancel();\n    };\n\n    $scope.post = post;\n}\n","'use strict';\n\napp.controller('PostDetailController', ['$scope', '$routeParams', 'postService', function ($scope, $routeParams, postService) {\n    $scope.page.loading = true;\n    $scope.post = {};\n    $scope.size = \"lg\";\n    postService.getPosts($routeParams.slug).then(function (response) {\n            $scope.post = response.data.post;\n            $scope.post.comments = response.data.comments;\n            $scope.page.loading = false;\n        },\n        function (response) {\n            console.log('Error:', response.status, response.statusText);\n        });\n}]);","'use strict';\n\napp.controller('PostListController', ['$scope', 'postService', 'goTo', '$mdDialog', 'toast',\n    function ($scope, postService, goTo, $mdDialog, toast) {\n        $scope.page.loading = true;\n        $scope.posts = [];\n        $scope.size = \"sm\"; // Set the last part of 'body-text-' class to sm i.e. 'small'\n        $scope.imageSrc = '';\n        postService.getPosts()\n            .then(function (response) {\n                    $scope.posts = response.data.posts;\n                    $scope.page.loading = false;\n                    $scope.posts.forEach(function (el) {\n                        el.date = new Date(el.date);\n                    });\n                    buildGridModel($scope.posts);\n                },\n                function (response) {\n                   toast.showToast('Could not retrieve the posts. Please try again later', 5000);\n                });\n\n        // Build a grid of posts of various sizes\n        function buildGridModel(posts) {\n            var it, results = [];\n\n            for (var j = 0; j < posts.length; j++) {\n                it = posts[j];\n                it.span = {\n                    row: randomSpan(),\n                    col: randomSpan()\n                };\n                it.img = it.span.row === 2 ? 'img-lg' : 'img-sm';\n                it.para = it.span.col === 2 && it.span.row === 1 ? 'para-md' : it.span.col === 1 && it.span.row === 1 ? 'para-sm' : 'para-lg';\n                results.push(it);\n            }\n            return posts;\n        }\n\n        // Get a random number for spans\n        function randomSpan() {\n            var r = Math.random();\n            if (r < 0.7) {\n                return 1;\n            } else {\n                return 2;\n            }\n        }\n\n        $scope.favorite = function (post) {\n            postService.favorite(post)\n                .then(function success(response) {\n                        angular.extend(post, response.data.post);\n                    },\n                    function error() {\n                       toast.showToast('Server error. Please try again later', 5000);\n                    }\n                )\n        };\n\n        $scope.hasFavorited = function (post) {\n            return postService.checkFav(post);\n        };\n\n        $scope.showAdvanced = function (ev, post) {\n\n            $mdDialog.show({\n                templateUrl: 'static/partials/user-list.html',\n                locals: {\n                    post: post\n                },\n                controller: DialogController,\n                parent: angular.element(document.body),\n                targetEvent: ev,\n                clickOutsideToClose: true,\n                fullscreen: false\n            });\n        };\n\n        $scope.gotoComments = function (post) {\n            goTo.goTo(post, 'comments');\n        };\n    }]);","'use strict';\napp.controller('UserController', ['$scope', 'userService', '$location', '$timeout', '$rootScope', '$cookies', 'imgPreview', 'toast',\n    function ($scope, userService, $location, $timeout, $rootScope, $cookies, imgPreview, toast) {\n        $scope.page.loading = false;\n        $scope.hasAccount = true;\n        $scope.changeForm = function () {\n            $scope.hasAccount = !$scope.hasAccount;\n        };\n        $scope.user = {\n            username: \"\",\n            email: \"\",\n            password: \"\"\n        };\n\n        $scope.register = function (form) {\n            var self = this;\n\n            /* Use logical and here to make sure the function executes only userForm is not undefined, preventing errors*/\n            $scope.changeUsername = function () {\n                self.userForm && self.userForm.username.$setValidity(\"userExists\", true);\n            };\n\n            $scope.changeEmail = function () {\n                self.userForm && self.userForm.email.$setValidity(\"emailExists\", true);\n            };\n\n            if (form.$valid) {\n                $scope.loading = true; // loading spinner\n                var file = self.myAva,\n                    user = $scope.user;\n                userService.newUser(file, user)\n                    .then(function success() {\n                        $scope.loading = false;\n                        toast.showToast('Successfully registered. Please log in with your details.', 1000).then(function () {\n                            // Show log in form\n                            $scope.hasAccount = true;\n                            // Clear form for login in\n                            $scope.user = {\n                                username: \"\",\n                                password: \"\"\n                            };\n                        })\n                    }, function error(response) {\n                        var userMessage = response.data.message;\n                        $scope.loading = false;\n                        if (userMessage) {\n                            if (userMessage.split(' ')[0] === 'User') {\n                                self.userForm.username.$setValidity(\"userExists\", false);\n                            } else if (userMessage.split(' ')[0] === 'Email') {\n                                self.userForm.email.$setValidity(\"emailExists\", false);\n                            } else {\n                                toast.showToast('Could not create user. Please try again later', 5000);\n                            }\n                        } else {\n                            toast.showToast('Could not create user. Please try again later', 5000);\n                        }\n                    });\n            }\n        };\n        $scope.login = function (form) {\n            var self = this;\n\n            $scope.changeUsername = function () {\n                self.loginForm.username.$setValidity(\"userExists\", true);\n            };\n\n            $scope.changePassword = function () {\n                self.loginForm.password.$setValidity(\"passwordIncorrect\", true);\n            };\n            if (form.$valid) {\n                $scope.loading = true; // loading spinner\n                var user = $scope.user;\n                userService.login(user)\n                    .then(function success(response) {\n                        toast.showToast('Successfully logged in', 1000);\n                        $scope.loading = false;\n                        var u = response.data.user;\n                        $cookies.putObject('current_user', u);\n                        $location.path('/posts');\n                    }, function error(response) {\n                        $scope.loading = false;\n                        $scope.userMessage = response.data.message;\n                        if ($scope.userMessage === 'username') {\n                            self.loginForm.username.$setValidity(\"userExists\", false);\n                        } else if ($scope.userMessage === 'password') {\n                            self.loginForm.password.$setValidity(\"passwordIncorrect\", false);\n                        }\n                    });\n            }\n        };\n\n        $scope.setFile = function (element) {\n            return imgPreview.preview(element, $scope);\n        };\n\n        $scope.activateUpload = function () {\n            return imgPreview.activateUpload('uploadAva');\n        }\n\n    }]);","'use strict';\n\napp.controller('UserDetailsController', ['$scope', 'toast', 'userService', '$cookies', function ($scope, toast, userService, $cookies) {\n\n    $scope.currentUser = function () {\n        return $cookies.get('current_user');\n    };\n\n    /* Separate function to get user details to avoid loops with JSON.parse since\n     currentUser() is called constantly */\n    $scope.getUserDetails = function () {\n        if ($scope.currentUser()) {\n            return JSON.parse($scope.currentUser());\n        }\n    };\n\n    $scope.user = $scope.getUserDetails();\n\n    $scope.updateUser = function (form) {\n        var self = this;\n        $scope.change = function () {\n            self.userDetailsForm.password.$setValidity(\"passwordIncorrect\", true);\n        };\n        if (form.$valid) {\n            $scope.loading = true; // loading spinner\n            var file = self.myAva,\n                user = $scope.user;\n            userService.update(file, user)\n                .then(function success(response) {\n                    $scope.loading = false;\n                    toast.showToast('Changes saved', 1000).then(function () {\n                        var u = response.data.user;\n                        $cookies.putObject('current_user', u);\n                    });\n                }, function error(response) {\n                    $scope.loading = false;\n                    $scope.message = response.data.message;\n                    if ($scope.message === 'password') {\n                        self.userDetailsForm.password.$setValidity(\"passwordIncorrect\", false);\n                    } else {\n                        toast.showToast('Could not save changes. Please try again later', 3000);\n                    }\n                });\n        }\n    };\n}]);","'use strict';\n\napp.controller('UserPostsController', ['$scope', 'userService', '$cookies', 'toast',\n    function ($scope, userService, $cookies, toast) {\n        $scope.size = \"sm\";\n        $scope.page.loading = true;\n        $scope.imageSrc = '';\n        userService.getPosts($cookies.getObject('current_user').username)\n            .then(function (response) {\n                    $scope.posts = response.data.posts;\n                    $scope.page.loading = false;\n                },\n                function (response) {\n                    $scope.page.loading = false;\n                    toast.showToast('Could not get data from the server. Please try again later', 5000);\n                    console.log('Error:', response.status, response.statusText);\n                });\n    }]);","'use strict';\n\napp.controller('UserProfileController', ['userService', '$routeParams', '$scope', 'toast',\n    function (userService, $routeParams, $scope, toast) {\n        $scope.size = \"sm\";\n        $scope.user = {};\n        $scope.imageSrc = '';\n\n        userService.getDetails($routeParams.user)\n            .then(function (response) {\n                $scope.user = response.data.user;\n                $scope.user.favs = response.data.favs;\n            }, function (response) {\n                toast.showToast('Could not get data from the server. Please try again later', 5000);\n            });\n\n        userService.getPosts($routeParams.user)\n            .then(function (response) {\n                    $scope.posts = response.data.posts;\n                    $scope.page.loading = false;\n                },\n                function (response) {\n                    $scope.page.loading = false;\n                    toast.showToast('Could not get data from the server. Please try again later', 5000);\n                });\n    }]);"],"sourceRoot":"/source/"}