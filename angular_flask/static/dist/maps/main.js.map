{"version":3,"sources":["angular_flask/static/src/js/app.js","angular_flask/static/src/js/controllers.js","angular_flask/static/src/js/directives.js","angular_flask/static/src/js/filters.js","angular_flask/static/src/js/services.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9XA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzfile":"main.js","sourcesContent":["'use strict';\n\nangular.module('app', ['ngRoute', 'ngResource', 'ngMaterial', 'ngAnimate', 'textAngular', 'ngSanitize', 'ngMessages', 'ngPassword', 'ngCookies', 'appFilters'])\n    .config(['$routeProvider', '$locationProvider', '$mdThemingProvider',\n        function ($routeProvider, $locationProvider, $mdThemingProvider) {\n            $routeProvider\n                .when('/', {\n                    templateUrl: 'static/partials/landing.html',\n                })\n                .when('/about', {\n                    templateUrl: 'static/partials/about.html',\n                })\n                .when('/posts', {\n                    templateUrl: 'static/partials/post-list.html',\n                })\n                .when('/new', {\n                    templateUrl: 'static/partials/new_post.html',\n                    controller: 'NewPostController'\n                })\n                .when('/edit', {\n                    templateUrl: 'static/partials/new_post.html',\n                    controller: 'EditPostController'\n                })\n                .when('/posts/:id', {\n                    templateUrl: '/static/partials/post-detail.html',\n                    controller: 'PostDetailController',\n                    resolve: {\n                        response: function ($route, allPosts) {\n                            return allPosts.getPosts().get({id: parseInt($route.current.params.id, 10)});\n                        }\n                    }\n                })\n                .when('/blog', {\n                    templateUrl: 'static/partials/post-list.html',\n                })\n                .when('/register', {\n                    templateUrl: 'static/partials/register.html',\n                })\n                .when('/login', {\n                    templateUrl: 'static/partials/register.html',\n                })\n                .when('/me/posts', {\n                    templateUrl: 'static/partials/my_posts.html',\n                })\n                .when('/users/:user', {\n                    templateUrl: 'static/partials/profile.html',\n                })\n                .otherwise({\n                    redirectTo: '/'\n                });\n\n            //Customize themes for Angular Material\n            $mdThemingProvider.theme('default')\n                .primaryPalette('blue-grey')\n                .accentPalette('red')\n                .warnPalette('deep-orange')\n                .backgroundPalette('grey');\n\n            $locationProvider.html5Mode(true);\n        }\n    ])\n    .run(function ($rootScope, $location, $cookies) {\n        $rootScope.$on(\"$routeChangeStart\", function (event, next) {\n            if (next.templateUrl == 'static/partials/new_post.html' || next.templateUrl == 'static/partials/profile.html'\n                || next.templateUrl == 'static/partials/my_posts.html') {\n                var user = $cookies.get('current_user');\n                if (!user || (next.templateUrl == 'static/partials/profile.html' && JSON.parse(user).username != next.params.user)) {\n                    $location.path(\"/login\");\n                }\n            }\n        });\n    })\n;","'use strict';\nangular.module('app')\n    .controller('PostListController', ['$scope', 'allPosts', 'favoritePost', 'goTo',\n        function ($scope, allPosts, favoritePost, goTo) {\n            $scope.posts = [];\n            $scope.size = \"sm\"; // Set the last part of 'body-text-' class to sm i.e. 'small'\n            allPosts.getPosts().get()\n                .$promise.then(function (response) {\n                    $scope.posts = response.posts;\n                    $scope.posts.forEach(function (el) {\n                        favoritePost.checkFav(el);\n                    });\n                    buildGridModel($scope.posts);\n                },\n                function (response) {\n                    console.log('Error:', response.status, response.statusText);\n                });\n\n            // Build a grid of posts of various sizes\n            function buildGridModel(posts) {\n                var it, results = [];\n\n                for (var j = 0; j < posts.length; j++) {\n\n                    it = posts[j];\n                    it.span = {\n                        row: randomSpan(),\n                        col: randomSpan()\n                    };\n                    it.img = it.span.row === 2 ? 'img-lg' : 'img-sm';\n                    it.para = it.span.col === 2 && it.span.row === 1 ? 'para-md' : it.span.col === 1 && it.span.row === 1 ? 'para-sm' : 'para-lg';\n                    results.push(it);\n                }\n                return posts;\n            }\n\n            // Get a random number for spans\n            function randomSpan() {\n                var r = Math.random();\n                if (r < 0.7) {\n                    return 1;\n                } else {\n                    return 2;\n                }\n            }\n\n            $scope.favorite = function (post) {\n                favoritePost.favorite(post)\n                    .then(function success(response) {\n                            angular.extend(post, response.data.post);\n                            favoritePost.checkFav(post);\n                        },\n                        function error(response) {\n                            console.log('Couldn\\'t favorite a post', response);\n                        }\n                    )\n            };\n\n            $scope.gotoComments = function (post) {\n                goTo.goTo(post, 'comments');\n            };\n        }])\n    .controller('PostDetailController', ['$scope', 'response', 'favoritePost', function ($scope, response, favoritePost) {\n        $scope.post = {};\n        $scope.size = \"lg\";\n\n        response.$promise.then(function (response) {\n                $scope.post = response.post;\n                $scope.post.comments = response.comments;\n                favoritePost.checkFav($scope.post)\n            },\n            function (response) {\n                console.log('Error:', response.status, response.statusText);\n            });\n    }])\n    .controller('NewPostController', ['$scope', 'postUpload', '$location', 'imgPreview', '$cookies',\n        function ($scope, postUpload, $location, imgPreview, $cookies) {\n            var currentUser = $cookies.getObject('current_user');\n            $scope.heading = 'Create';\n            $scope.button = 'Publish';\n            if (currentUser) {\n                $scope.post = {\n                    title: '',\n                    author: currentUser.username,\n                    avatar: currentUser.avatar,\n                    date: new Date(),\n                    cover_photo: '../img/covers/default.jpg',\n                    disabled: true\n                };\n            }\n            $scope.createPost = function (form) {\n\n                if (form.$valid) {\n                    var file = $scope.myFile;\n                    postUpload.newPost(file, $scope.post)\n                        .then(function success(response) {\n                            console.log('Posted');\n                            $location.path('/posts');\n                        }, function error(response) {\n                            console.log('Could not post', response);\n                        });\n                }\n            };\n\n            $scope.setFile = function (element) {\n                return imgPreview.preview(element, $scope);\n            };\n\n            $scope.activateUpload = function () {\n                return imgPreview.activateUpload('uploadImage');\n            }\n        }])\n    .controller('EditPostController', ['$scope', 'editPost', '$location', 'imgPreview', 'sharedPost',\n        function ($scope, editPost, $location, imgPreview, sharedPost) {\n            $scope.heading = 'Edit';\n            $scope.button = 'Save changes';\n            $scope.post = sharedPost.post;\n            $scope.post.disabled = true;\n            $scope.createPost = function (form) {\n\n                if (form.$valid) {\n                    var file = $scope.myFile;\n                    editPost.editPost(file, $scope.post)\n                        .then(function success(response) {\n                            console.log('Edited');\n                            $location.path('/posts');\n                        }, function error(response) {\n                            console.log('Could not edit', response);\n                        });\n                }\n            };\n\n            $scope.setFile = function (element) {\n                return imgPreview.preview(element, $scope);\n            };\n\n            $scope.activateUpload = function () {\n                return imgPreview.activateUpload('uploadImage');\n            }\n        }])\n\n    .controller('UserController', ['$scope', 'createUser', '$location', '$timeout', '$rootScope', '$cookies', 'imgPreview',\n        function ($scope, createUser, $location, $timeout, $rootScope, $cookies, imgPreview) {\n            $scope.hasAccount = true;\n            $scope.changeForm = function () {\n                $scope.hasAccount = !$scope.hasAccount;\n            };\n            $scope.user = {\n                username: \"\",\n                email: \"\",\n                password: \"\"\n            };\n\n            $scope.register = function (form) {\n                var self = this;\n\n                $scope.changeUsername = function () {\n                    self.userForm.username.$setValidity(\"userExists\", true);\n                };\n\n                $scope.changeEmail = function () {\n                    self.userForm.email.$setValidity(\"emailExists\", true);\n                };\n\n                if (form.$valid) {\n                    var file = self.myAva,\n                        user = $scope.user;\n                    createUser.newUser(file, user)\n                        .then(function success() {\n                            $location.path('/posts');\n                        }, function error(response) {\n                            $scope.userMessage = response.data.message;\n                            if ($scope.userMessage.split(' ')[0] === 'User') {\n                                self.userForm.username.$setValidity(\"userExists\", false);\n                            } else if ($scope.userMessage.split(' ')[0] === 'Email') {\n                                self.userForm.email.$setValidity(\"emailExists\", false);\n                            }\n                        });\n                }\n            };\n            $scope.login = function (form) {\n                var self = this;\n\n                $scope.changeUsername = function () {\n                    self.loginForm.username.$setValidity(\"userExists\", true);\n                };\n\n                $scope.changePassword = function () {\n                    self.loginForm.password.$setValidity(\"passwordIncorrect\", true);\n                };\n                if (form.$valid) {\n                    var user = $scope.user;\n                    createUser.loginUser(user)\n                        .then(function success(response) {\n                            var u = response.data.user;\n                            //favs = response.data.favs;\n                            //console.log(u)\n                            $cookies.putObject('current_user', u);\n                            $location.path('/posts');\n                        }, function error(response) {\n                            $scope.userMessage = response.data.message;\n                            if ($scope.userMessage === 'username') {\n                                self.loginForm.username.$setValidity(\"userExists\", false);\n                            } else if ($scope.userMessage === 'password') {\n                                self.loginForm.password.$setValidity(\"passwordIncorrect\", false);\n                            }\n                        });\n                }\n            };\n\n            $scope.setFile = function (element) {\n                return imgPreview.preview(element, $scope);\n            };\n\n            $scope.activateUpload = function () {\n                return imgPreview.activateUpload('uploadAva');\n            }\n        }])\n    .controller('UserDetailsController', ['$scope', '$rootScope', 'logoutUser', '$cookies', '$location', 'imgPreview',\n        'updateUser', 'sharedPost', 'checkRedirect',\n        function ($scope, $rootScope, logoutUser, $cookies, $location, imgPreview, updateUser, sharedPost, checkRedirect) {\n            checkRedirect.forceSSL();\n            $scope.isOpen = false;\n            $scope.currentUser = function () {\n                return $cookies.get('current_user');\n            };\n\n            /* Separate function to get user details to avoid loops with JSON.parse since\n             currentUser() is called constantly */\n            $scope.getUserDetails = function () {\n                if ($scope.currentUser()) {\n                    return JSON.parse($scope.currentUser());\n                }\n            };\n\n            $scope.user = $scope.getUserDetails();\n\n            $scope.logout = function () {\n                if ($scope.currentUser()) {\n                    logoutUser.logout()\n                        .then(function success() {\n                            $cookies.remove('current_user');\n                            console.log('logged out');\n                            $location.path('/');\n                            checkRedirect.forceSSL();\n                        }, function error(response) {\n                            console.log('Could not log out', response);\n                        });\n                }\n            };\n\n            $scope.setFile = function (element) {\n                return imgPreview.preview(element, $scope);\n            };\n\n            $scope.activateUpload = function () {\n                return imgPreview.activateUpload('uploadAva');\n            };\n\n            $scope.updateUser = function (form) {\n                var self = this;\n                $scope.change = function () {\n                    self.userDetailsForm.password.$setValidity(\"passwordIncorrect\", true);\n                };\n                if (form.$valid) {\n                    var file = self.myAva,\n                        user = $scope.user;\n                    updateUser.update(file, user)\n                        .then(function success(response) {\n                            var u = response.data.user;\n                            u.favs = response.data.favs;\n                            $cookies.putObject('current_user', u);\n                            $location.path('/posts');\n                            checkRedirect.forceSSL();\n                        }, function error(response) {\n                            $scope.message = response.data.message;\n                            if ($scope.message === 'password') {\n                                self.userDetailsForm.password.$setValidity(\"passwordIncorrect\", false);\n                            }\n                        });\n                }\n            };\n\n            /* Redirect to '/new' route and clear the sharedPost since we are not editing but creating a new post */\n            $scope.createPost = function () {\n                sharedPost.post = {};\n                checkRedirect.forceSSL();\n                $location.path('/new');\n            }\n        }])\n    .controller('UserPostsController', ['$scope', 'userPosts', '$cookies', 'favoritePost', function ($scope, userPosts, $cookies, favoritePost) {\n        $scope.size = \"sm\";\n\n        userPosts.getPosts($cookies.getObject('current_user').id)\n            .then(function (response) {\n                    $scope.posts = response.data.posts;\n                    $scope.posts.forEach(function (el) {\n                        favoritePost.checkFav(el);\n                    });\n                },\n                function (response) {\n                    console.log('Error:', response.status, response.statusText);\n                });\n\n    }])\n    .controller('PostController', ['$scope', 'favoritePost', 'deletePost', '$location', 'sharedPost', 'addComment', '$mdDialog', 'goTo',\n        function ($scope, favoritePost, deletePost, $location, sharedPost, addComment, $mdDialog, goTo) {\n\n            $scope.favorite = function (post) {\n                favoritePost.favorite(post)\n                    .then(function success(response) {\n                            angular.extend(post, response.data.post);\n                            favoritePost.checkFav(post);\n                        },\n                        function error(response) {\n                            console.log('Couldn\\'t favorite a post', response);\n                        }\n                    )\n            };\n\n            $scope.editPost = function (post) {\n                sharedPost.post = post;\n                $location.path('/edit');\n            };\n\n            // Show modal to ask for confirmation of post deletion\n            $scope.showConfirm = function (ev, postId) {\n                deletePost.delete(ev, postId)\n                    .then(function () {\n                        // if there's posts array, we're in the post list controller or user posts controller and have to update the list\n                        if ($scope.posts) {\n                            for (var i = 0; i < $scope.posts.length; i++) {\n                                if ($scope.posts[i].id === postId) {\n                                    $scope.posts.splice(i, 1);\n                                }\n                            }\n                            // Else just redirect to /posts\n                        } else {\n                            $location.path('/posts');\n                        }\n                    })\n            };\n\n            $scope.addComment = function (post) {\n                var self = this;\n                addComment.add(self.comment, post.id)\n                    .then(function success(response) {\n                        self.comment = '';\n                        angular.extend(post.comments, response.data.comments);\n                    }, function error(response) {\n                        console.log('Could not add comment', response);\n                    });\n            };\n\n            $scope.gotoComments = function (post) {\n                goTo.goTo(post, 'comments');\n            };\n\n            $scope.showAdvanced = function (ev, post) {\n\n                $mdDialog.show({\n                    templateUrl: 'static/partials/user-list.html',\n                    locals: {\n                        post: post\n                    },\n                    controller: 'DialogController',\n                    parent: angular.element(document.body),\n                    targetEvent: ev,\n                    clickOutsideToClose: true,\n                    fullscreen: false\n                });\n            }\n        }])\n    .controller('DialogController', ['$scope', '$mdDialog', 'post', function ($scope, $mdDialog, post) {\n\n        $scope.cancel = function () {\n            $mdDialog.cancel();\n        };\n\n        $scope.post = post;\n\n    }])\n;","angular.module('app')\n    .directive('fileModel', ['$parse', function ($parse) {\n        return {\n            restrict: 'A',\n            link: function (scope, element, attrs) {\n                var model = $parse(attrs.fileModel);\n                var modelSetter = model.assign;\n\n                element.bind('change', function () {\n                    scope.$apply(function () {\n                        modelSetter(scope, element[0].files[0]);\n                    });\n                });\n            }\n        };\n    }])\n\n    .directive('post', function () {\n        return {\n            restrict: 'E',\n            controller: 'PostController',\n            templateUrl: 'static/partials/post.html',\n            replace: true\n        };\n    });\n","'use strict';\n\n/* Filters */\n\nangular.module('appFilters', [])\n    .filter('localDate', function () {\n        return function (input) {\n            return moment(new Date(input)).format('MMM D YYYY HH:mm');\n        }\n    });","'use strict';\n\nangular.module('app')\n    .constant(\"baseURL\", \"https://thee-blog.herokuapp.com\")\n    // A service to share 'post' object between controllers\n    .service('sharedPost', function () {\n        var post = this;\n    })\n    .service('allPosts', ['$resource', 'baseURL', function ($resource, baseURL) {\n        this.getPosts = function () {\n            return $resource(baseURL + '/blog/api/posts/:id', {}, {\n                query: {\n                    method: 'GET',\n                    isArray: true\n                }\n            });\n        }\n    }])\n    .service('postUpload', ['$http', function ($http) {\n        this.newPost = function (file, data) {\n            var fd = new FormData();\n            fd.append('file', file);\n            fd.append('post', JSON.stringify(data));\n            return $http.post(\"https://thee-blog.herokuapp.com/blog/api/posts/new\", fd, {\n                transformRequest: angular.identity,\n                headers: {'Content-Type': undefined}\n            })\n        }\n    }])\n    .service('editPost', ['$http', function ($http) {\n        this.editPost = function (file, data) {\n            var fd = new FormData();\n            fd.append('file', file);\n            fd.append('post', JSON.stringify(data));\n            return $http.post(\"/blog/api/posts/\" + data.id + \"/edit\", fd, {\n                transformRequest: angular.identity,\n                headers: {'Content-Type': undefined}\n            })\n        }\n    }])\n    // Reusable service to ask user for confirmation and delete a post\n    .service('deletePost', ['$http', '$mdDialog', function ($http, $mdDialog) {\n        this.delete = function (ev, postId) {\n            var confirm = $mdDialog.confirm()\n                .title('Are you sure you want to delete this post?')\n                .textContent('This action cannot be undone.')\n                .ariaLabel('Confirm post deletion')\n                .targetEvent(ev)\n                .ok('Delete')\n                .cancel('Cancel');\n            return $mdDialog.show(confirm).then(function () {\n                return $http.post(\"https://thee-blog.herokuapp.com/blog/api/posts/\" + postId + \"/delete\", {})\n                    .then(function success() {\n                            console.log('Deleted post with id', postId);\n                        },\n                        function error(response) {\n                            console.log('Could not delete', response);\n                        })\n            });\n        }\n    }])\n    .service('createUser', ['$http', function ($http) {\n        this.newUser = function (file, user) {\n            var fd = new FormData();\n            fd.append('file', file);\n            fd.append('user', JSON.stringify(user));\n            return $http.post(\"/blog/api/users\", fd, {\n                transformRequest: angular.identity,\n                headers: {'Content-Type': undefined}\n            });\n        };\n        this.loginUser = function (user) {\n            return $http.post(\"/login\", user);\n        }\n    }])\n    .service('logoutUser', ['$http', function ($http) {\n        this.logout = function () {\n            return $http.post(\"https://thee-blog.herokuapp.com/logout\", {});\n        }\n    }])\n    .service('userPosts', ['$http', function ($http) {\n        this.getPosts = function (user_id) {\n            return $http.get(\"/blog/api/users/\" + user_id + \"/posts\")\n        }\n    }])\n    .service('imgPreview', function () {\n        this.preview = function (element, scope) {\n            var reader = new FileReader();\n            reader.onload = function (event) {\n                scope.imageSrc = event.target.result;\n                scope.$apply();\n            };\n            // when the file is read it triggers the onload event above.\n            reader.readAsDataURL(element.files[0]);\n        };\n        this.activateUpload = function (id) {\n            document.getElementById(id).click();\n        }\n    })\n    .service('updateUser', ['$http', function ($http) {\n        this.update = function (file, user) {\n            var fd = new FormData();\n            fd.append('file', file);\n            fd.append('user', JSON.stringify(user));\n            return $http.post(\"/blog/api/users/edit\", fd, {\n                transformRequest: angular.identity,\n                headers: {'Content-Type': undefined}\n            });\n        };\n    }])\n    .service('favoritePost', ['$http', '$cookies', function ($http, $cookies) {\n        this.favorite = function (post) {\n            return $http.post(\"/blog/api/posts/\" + post.id, {});\n        };\n\n        /* Check if the logged in user has favorited the post and add red color to fav icon if yes */\n        this.checkFav = function (post) {\n            var user = $cookies.getObject('current_user');\n            if (user) {\n                var filtered = post.favorited_by.filter(function (el) {\n                    return el.username == user.username;\n                });\n                if (filtered.length) {\n                    post.favClass = 'red';\n                } else {\n                    post.favClass = '';\n                }\n            }\n        }\n    }])\n    .service('addComment', ['$http', function ($http) {\n        this.add = function (comment, postId) {\n            return $http.post(\"/blog/api/posts/\" + postId + \"/comments/new\", JSON.stringify(comment))\n        }\n    }])\n    .service('goTo', ['$anchorScroll', '$location', function ($anchorScroll, $location) {\n        this.goTo = function (post, el) {\n            var selector = document.getElementById(el);\n            // If we are on post detail page, scroll to comments\n            if (selector) {\n                $location.hash(el);\n                $anchorScroll();\n                // Else go to post detail page and jump to comments\n            } else {\n                $location.path('/posts/' + post.id).hash(el);\n            }\n        }\n    }])\n    .service('checkRedirect', ['$location', '$window', function ($location, $window) {\n        this.forceSSL = function () {\n            if ($location.protocol() !== 'https') {\n                $window.location.href = $location.absUrl().replace('http', 'https');\n            }\n        };\n    }])\n;\n\n\n"],"sourceRoot":"/source/"}