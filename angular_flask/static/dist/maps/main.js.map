{"version":3,"sources":["angular_flask/static/src/js/app.js","angular_flask/static/src/js/controllers.js","angular_flask/static/src/js/directives.js","angular_flask/static/src/js/filters.js","angular_flask/static/src/js/services.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"main.js","sourcesContent":["'use strict';\n\nangular.module('AngularFlask', ['ngRoute', 'ngResource', 'ngMaterial', 'ngAnimate', 'textAngular', 'ngSanitize', 'ngMessages', 'ngPassword', 'ngCookies'])\n    .config(['$routeProvider', '$locationProvider', '$mdThemingProvider', '$httpProvider',\n        function ($routeProvider, $locationProvider, $mdThemingProvider, $httpProvider) {\n            $routeProvider\n                .when('/', {\n                    templateUrl: 'static/partials/landing.html',\n                })\n                .when('/about', {\n                    templateUrl: 'static/partials/about.html',\n                })\n\n                .when('/posts', {\n                    templateUrl: 'static/partials/post-list.html',\n\n                })\n                .when('/new', {\n                    templateUrl: 'static/partials/new_post.html',\n                })\n                .when('/posts/:id', {\n                    templateUrl: '/static/partials/post-detail.html',\n                })\n                .when('/blog', {\n                    templateUrl: 'static/partials/post-list.html',\n                })\n                .when('/register', {\n                    templateUrl: 'static/partials/register.html',\n                })\n                .when('/login', {\n                    templateUrl: 'static/partials/register.html',\n                })\n            /* .otherwise({\n             redirectTo: '/'\n             });*/\n\n            //Customize themes for Angular Material\n            $mdThemingProvider.theme('default')\n                .primaryPalette('blue-grey')\n                .accentPalette('orange')\n                .backgroundPalette('grey');\n\n            $locationProvider.html5Mode(true);\n        }\n    ])\n    .config(function ($provide) {\n\n        $provide.decorator('taOptions', ['taRegisterTool', '$delegate', function (taRegisterTool, taOptions) {\n            taRegisterTool('uploadImage', {\n                buttontext: 'Upload Image',\n                iconclass: \"fa fa-image\",\n                action: function () {\n                    document.getElementById('uploadImage').click();\n                }\n            });\n            taOptions.toolbar[1].push('uploadImage');\n            return taOptions;\n        }]);\n    })\n    .run(function ($rootScope, $location, $cookies) {\n        $rootScope.$on(\"$routeChangeStart\", function (event, next) {\n            if (next.templateUrl == 'static/partials/new_post.html') {\n                var user = $cookies.get('current_user');\n                if (!user) {\n                    $location.path(\"/login\");\n                }\n            }\n        });\n    })\n;","'use strict';\nangular.module('AngularFlask')\n    .controller('PostListController', ['$scope', 'allPosts', function ($scope, allPosts) {\n        $scope.posts = [];\n        $scope.showPost = false;\n        $scope.message = \"Loading ...\";\n        allPosts.getPosts().get()\n            .$promise.then(function (response) {\n                $scope.posts = response.posts;\n                //console.log('Got posts:', response);\n                $scope.showPost = true;\n                buildGridModel($scope.posts);\n            },\n            function (response) {\n                $scope.message = \"Error: \" + response.status + \" \" + response.statusText;\n            });\n\n        function buildGridModel(posts) {\n            var it, results = [];\n            for (var j = 0; j < posts.length; j++) {\n                it = posts[j];\n                it.span = {row: 1, col: 1};\n                it.img = 'img-sm';\n                it.para = 'para-sm';\n                switch (j + 1) {\n                    case 1:\n                        it.span.row = it.span.col = 2;\n                        it.img = 'img-lg';\n                        it.para = 'para-lg';\n                        break;\n                    case 4:\n                        it.span.col = 2;\n                        break;\n                    case 5:\n                        it.span.row = it.span.col = 2;\n                        it.img = 'img-lg';\n                        it.para = 'para-lg';\n                        break;\n                }\n                results.push(it);\n            }\n            return posts;\n        }\n    }])\n    .controller('NewPostController', ['$scope', 'fileUpload', '$location', function ($scope, fileUpload, $location) {\n\n        $scope.createPost = function () {\n            var file = $scope.myFile;\n            fileUpload.newPost(file, $scope.post, $scope.htmlVariable);\n            $location.path('/');\n        };\n\n    }])\n    .controller('PostDetailController', ['$scope', 'allPosts', '$routeParams', function ($scope, allPosts, $routeParams) {\n        $scope.post = {};\n        allPosts.getPosts().get({id: parseInt($routeParams.id, 10)})\n            .$promise.then(function (response) {\n                //console.log('response is: ', response)\n                $scope.post = response.post;\n                $scope.showPost = true;\n            },\n            function (response) {\n                $scope.message = \"Error: \" + response.status + \" \" + response.statusText;\n            });\n    }])\n    .controller('UserController', ['$scope', 'createUser', '$location', '$timeout', '$rootScope', '$cookies',\n        function ($scope, createUser, $location, $timeout, $rootScope, $cookies) {\n            $scope.hasAccount = true;\n            $scope.changeForm = function () {\n                $scope.hasAccount = !$scope.hasAccount;\n            };\n            $scope.user = {\n                username: \"\",\n                email: \"\",\n                password: \"\"\n            };\n            $scope.register = function () {\n                var self = this,\n                    file = self.myAva,\n                    user = $scope.user;\n                createUser.newUser(file, user)\n                    .then(function success() {\n                        $location.path('/posts');\n                    }, function error(response) {\n                        $scope.userMessage = response.data.message;\n                        if ($scope.userMessage.split(' ')[0] === 'User') {\n                            self.userForm.username.$setValidity(\"userExists\", false);\n                            $timeout(function () {\n                                // Set form to valid after timeout to enable submitting it again\n                                self.userForm.username.$setValidity(\"userExists\", true);\n                            }, 2000);\n                        } else if ($scope.userMessage.split(' ')[0] === 'Email') {\n                            self.userForm.email.$setValidity(\"emailExists\", false);\n                            $timeout(function () {\n                                self.userForm.email.$setValidity(\"emailExists\", true);\n                            }, 2000);\n                        }\n                    });\n            };\n            $scope.login = function () {\n                var self = this;\n                var user = $scope.user;\n                createUser.loginUser(user)\n                    .then(function success() {\n                        console.log(\"Successfully logged in\");\n                        $cookies.putObject('current_user', user);\n                        $location.path('/posts');\n                    }, function error(response) {\n                        $scope.userMessage = response.data.message;\n                        console.log('Error message: ', $scope.userMessage)\n                        if ($scope.userMessage === 'username') {\n                            self.loginForm.username.$setValidity(\"userExists\", false);\n                            $timeout(function () {\n                                // Set form to valid after timeout to enable submitting it again\n                                self.loginForm.username.$setValidity(\"userExists\", true);\n                            }, 2000);\n                        } else if ($scope.userMessage === 'password') {\n                            self.loginForm.password.$setValidity(\"passwordIncorrect\", false);\n                            $timeout(function () {\n                                self.loginForm.password.$setValidity(\"passwordIncorrect\", true);\n                            }, 2000);\n                        }\n                    });\n            };\n            $scope.setFile = function (element) {\n                /*var self = this;\n                 $scope.currentFile = element.files[0];\n                 var filesize = Math.round(element.files[0].size / 1024);*/\n                var reader = new FileReader();\n                reader.onload = function (event) {\n                    $scope.imageSrc = event.target.result;\n                    $scope.$apply();\n\n                };\n                // when the file is read it triggers the onload event above.\n                reader.readAsDataURL(element.files[0]);\n            };\n            $scope.activateUpload = function () {\n                document.getElementById('uploadAva').click();\n            }\n        }])\n    .controller('MainCtrl', ['$scope', '$rootScope', 'logoutUser', '$cookies', function ($scope, $rootScope, logoutUser, $cookies) {\n        $scope.logout = function () {\n            if ($cookies.get('current_user')) {\n                logoutUser.logout()\n                    .then(function success() {\n                        $cookies.remove('current_user');\n                        console.log('logged out');\n                    }, function error(response) {\n                        console.log('Could not log out', response);\n                    });\n            }\n        };\n        $scope.isLoggedIn = function () {\n            return $cookies.get('current_user');\n        }\n    }])\n","angular.module('AngularFlask')\n    .directive('fileModel', ['$parse', function ($parse) {\n        return {\n            restrict: 'A',\n            link: function (scope, element, attrs) {\n                var model = $parse(attrs.fileModel);\n                var modelSetter = model.assign;\n\n                element.bind('change', function () {\n                    scope.$apply(function () {\n                        modelSetter(scope, element[0].files[0]);\n                    });\n                });\n            }\n        };\n    }])\n","'use strict';\n\n/* Filters */\n\nangular.module('angularFlaskFilters', []).filter('uppercase', function () {\n    return function (input) {\n        return input.toUpperCase();\n    }\n});","'use strict';\n\nangular.module('AngularFlask')\n    .constant(\"baseURL\", \"http://0.0.0.0:5000\")\n    .service('allPosts', ['$resource', 'baseURL', function ($resource, baseURL) {\n        this.getPosts = function () {\n            return $resource(baseURL + '/blog/api/posts/:id', {}, {\n                query: {\n                    method: 'GET',\n                    isArray: true\n                }\n            });\n        }\n    }])\n    .service('fileUpload', ['$http', function ($http) {\n        this.newPost = function (file, data1, data2) {\n            var fd = new FormData();\n            fd.append('file', file);\n            fd.append(\"content\", JSON.stringify(data1));\n            fd.append(\"content2\", JSON.stringify(data2));\n            $http.post(\"http://0.0.0.0:5000/blog/api/posts/new\", fd, {\n                transformRequest: angular.identity,\n                headers: {'Content-Type': undefined}\n            })\n        }\n    }])\n    .service('createUser', ['$http', function ($http) {\n        this.newUser = function (file, user) {\n            var fd = new FormData();\n            fd.append('file', file);\n            fd.append('user', JSON.stringify(user));\n            return $http.post(\"http://0.0.0.0:5000/blog/api/users\", fd, {\n                transformRequest: angular.identity,\n                headers: {'Content-Type': undefined}\n            });\n        };\n        this.loginUser = function (user) {\n            return $http.post(\"http://0.0.0.0:5000/login\", user);\n        }\n    }])\n    .service('logoutUser', ['$http', function ($http) {\n        this.logout = function () {\n            return $http.post(\"http://0.0.0.0:5000/logout\", {});\n        }\n    }])\n;\n\n\n"],"sourceRoot":"/source/"}